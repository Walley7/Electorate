===== CONFIGURATION =====
Both the test application and log viewer have hard coded database connection details, given their purpose is simply for testing and prototyping. As such if you wish to use them with your own database, you'll need to alter the code to have the correct connection string.

These details can be changed in the following locations:
ElectorateTest: TestForm.cs, line 41
ElectorateLogViewer: LogViewForm.cs, line 29


===== INPUTS =====
Some of the functions have input requirements - the three text fields in the middle of the application serve this purpose (it's more convenient than having to re-enter the keys for every operation).

Public Key: Public key of the organisation to operate with.
Private Key: Private key of the organisation to operate with.
Ballot Address: Blockchain address of the ballot to operate with.


===== SYSTEM =====
BALANCE
Lists the balance (in ether) of the system's ethereum account.

ADD CONTRACT SOURCE
Compiles and stores in the database the resulting bytecode of the default ballot source file (Ethereum/Ballot.sol). This is the bytecode that will be deployed to the blockchain when a ballot is created.


===== ORGANISATION =====
CREATE ORGANISATION
Creates a new organisation, as well as a new ethereum account to represent this organisation on the blockchain.

The public key and private key will be listed in the output window, in the format: 'CREATE ORGANISATION: public_key, private_key, funding_option'.

LIST ORGANISATIONS
Lists all organisations which exist in the database, in the format: 'public_key, private_key, funding_option'.

ORGANISATION BALANCE
[arguments: public key, private key]
Lists the balance of the organisation.

SWAP ORGANISATION BALANCE
[arguments: public key, private key]
Swaps the funding option of the organisation between system funded and self funded:
- System funded: When the organisation's account lacks the funds to enact a blockchain operation, the funds will automatically be transferred from the system account.
- Self funded: The system never automatically funds the organisation's account - it's the responsibility of the organisation to keep it funded.


===== BALLOTS =====
CREATE BALLOT
[arguments: public key, private key]
Creates a new ballot by deploying the ballot contract byte code to the blockchain, with the organisation's blockchain account as the owner of the contract. This means that only the organisation's account has the access to call functions that add or remove options, or that lock the options.

The byte code deployed is the byte code generated by the Add Contract Source step.

LIST BALLOTS
[arguments: public key, private key]
Lists the ballots for the organisation, in the format: 'address, name, version, organisation_address, end_date, options_locked'.

Also listed are the voting options of the ballot and the tallies for each.

ADD OPTION
[arguments: public key, private key, ballot address]
Prompts for and adds a voting option to the ballot.

REMOVE OPTION
[arguments: public key, private key, ballot address]
Prompts for and removes a voting option from the ballot.

LOCK OPTIONS
[arguments: public key, private key, ballot address]
Locks the voting options for the ballot. This disallows adding or removing and further options, and is a required step before voting may occur.

ALLOCATE VOTER
[arguments: public key, private key, ballot address]
Allocates a voter to the ballot, specified by the ID of the voter. Allocation means that the voter is now eligible to register to vote in the ballot - this is how the organisation can control who will be able to take part.

DEALLOCATE VOTER
[arguments: public key, private key, ballot address]
Deallocates a voter from the ballot, specified by the ID of the voter. If the voter in question has already registered to vote then this deallocation is essentially meaningless, as registrations cannot be revoked.

LIST ALLOCATED VOTERS
[arguments: public key, private key, ballot address]
Lists the voters allocated to the ballot, in the format: 'voter_id, voter_name'.

LOG: LOCK OPTIONS
[arguments: public key, private key]
Lists the blockchain logs of all instances of locking the options of a ballot, for this organisation.

LOG: ADD VOTER
[arguments: public key, private key]
Lists the blockchain logs of all instances of a voter registering to vote with a ballot, for this organisation.

LOG: VOTE
[arguments: public key, private key]
Lists the blockchain logs of all instances of a voter voting in a ballot, for this organisation.


===== VOTERS =====
CREATE VOTER
[arguments: public key, private key]
Creates a new voter record with an automatically generated ID and name. The ID is used to specify the voter for the other voter functions.

LIST VOTERS
[arguments: public key, private key]
Lists the organisation's voters.

REGISTER TO VOTE
[arguments: ballot address]
Registers a voter to take part in the ballot, specified by the ID of the voter. The voter must have been allocated to the ballot.

This also generates a new blockchain account, with a small amount of funds transferred from the system account. Each time a voter registers to a ballot, a new blockchain account which represents that voter to that ballot is created - these accounts are not re-used for other ballots.

VOTER BALANCE
[arguments: ballot address]
Lists the balance of the blockchain account used for voting between the specified voter and the ballot.

FUND VOTER
[arguments: public key, private key, ballot address]
Transfers funds from the system account to the blockchain account used for voting between the specified voter and the ballot.

VOTE
[arguments: ballot address]
Votes in the ballot as the voter specified by the requested ID. Vote for an option by entering the number of the option, e.g. 1, 2, 3.

The vote will be recorded in the blockchain contract for the ballot. A voter can re-vote as many times as they wish, provided their account has funds - when this occurs their vote will be moved from their previous choice to the new choice.


===== LOG VIEWER =====
The log viewer lists all logs (lock options, add voter, vote) for an organisation.

Usage: Enter the organisation's public and private keys, and then press refresh logs.